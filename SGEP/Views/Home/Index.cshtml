@{
    ViewData["Title"] = "Home Page";
}

<div style="display flex; align-items: center; justify-content: center; height: 400px">
    <h1 class="display-3 text-center" style="transform: translateY(100%)">SGEP</h1>
</div>

<div class="modal" id="secret-painter" tabindex="-1" role="dialog">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Painter</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body row justify-content-center">
              <form action="">
                  <div class="form-group">
                    <span>Cor: </span>
                    <input type="color" style="height: 40px" class="form-control" id="selected-color" />
                  </div>
                  <div class="form-group">
                      <canvas width="300" 
                              height="300" 
                              id="tela" 
                              style="border-style: solid;
                                      border-width: thin;
                                      border-color: black;">
                      </canvas>
                  </div>
              </form>
          </div>
        </div>
      </div>
  </div>

<script>
    const painter = () => 
    {
        $('#secret-painter').modal('show');

        const values = 
        {
            '0': 0,  '1': 1,  '2': 2,  '3': 3, 
            '4': 4,  '5': 5,  '6': 6,  '7': 7,
            '8': 8,  '9': 9,  'a': 10, 'A': 10,
            'b': 11, 'B': 11, 'c': 12, 'C': 12,
            'd': 13, 'D': 13, 'e': 14, 'E': 14,
            'f': 15, 'F': 15,
        }
        
        const tela = document.getElementById('tela');
        const ctx = tela.getContext('2d');
        
        const colorPicker = document.getElementById('selected-color');
        var color = [0, 0, 0];
        (() => 
        {
            const _val = colorPicker.value;
            color [0] = values[_val[1]] + values[_val[2]]*16;
            color [1] = values[_val[3]] + values[_val[4]]*16;
            color [2] = values[_val[5]] + values[_val[6]]*16;
        })();
        
        const isPainting = 
        {
            "is?": false,
            x: -1,
            y: -1,
            t: 0,
            start: [0, 0, 0]
        }
        
        const blocks = new Array(parseInt(tela.width/10));
        for (let i = 0; i < blocks.length; i++) {
            blocks[i] = new Array(parseInt(tela.height/10));    
        }
        
        for (let x = 0; x < blocks.length; x++) {
            for (let y = 0; y < blocks[x].length; y++) {
                blocks[x][y] = { 
                    color: [255, 255, 255], 
                    x: x, 
                    y: y, 
                    paintColor: () => `rgb(${blocks[x][y].color[0]}, ${blocks[x][y].color[1]}, ${blocks[x][y].color[2]})`
                };
            }
        }

        console.log(blocks);
        

        requestAnimationFrame((function draw() {
            
            if (isPainting['is?'])
            {   
                ctx.fillStyle = blocks[isPainting.x][isPainting.y].paintColor();
                
                ctx.fillRect(10*isPainting.x, 10*isPainting.y, 10, 10);
                
                blocks[isPainting.x][isPainting.y].color[0] = interpolate(
                    isPainting.start[0],
                    color[0],
                    isPainting.t,
                    funcs.line
                );
                blocks[isPainting.x][isPainting.y].color[1] = interpolate(
                    isPainting.start[1],
                    color[1],
                    isPainting.t,
                    funcs.line
                );
                blocks[isPainting.x][isPainting.y].color[2] = interpolate(
                    isPainting.start[2],
                    color[2],
                    isPainting.t,
                    funcs.line
                );
                isPainting.t = Math.min(1, isPainting.t + 0.16);
            }
            requestAnimationFrame(draw);
        }));
        
        tela.onmousedown = function (e)
        {
            const rect = e.target.getBoundingClientRect();
            const x = parseInt((e.clientX - rect.left)/10);
            const y = parseInt((e.clientY - rect.top)/10);
            isPainting['is?'] = true;
            isPainting.start[0] = blocks[x][y].color[0];
            isPainting.start[1] = blocks[x][y].color[1];
            isPainting.start[2] = blocks[x][y].color[2];
        }
        
        tela.onmousemove = function (e)
        {
            const rect = e.target.getBoundingClientRect();
            const x = parseInt((e.clientX - rect.left)/10);
            const y = parseInt((e.clientY - rect.top)/10);
            if (x != isPainting.x || y != isPainting.y)
            {
                isPainting.t = 0;
                isPainting.start[0] = blocks[x][y].color[0];
                isPainting.start[1] = blocks[x][y].color[1];
                isPainting.start[2] = blocks[x][y].color[2];
                if (isPainting['is?'])
                {
                    isPainting.t = Math.min(1, isPainting.t + 0.16);
                    blocks[x][y].color[0] = interpolate(
                        isPainting.start[0],
                        color[0],
                        isPainting.t,
                        funcs.line
                    );
                    blocks[x][y].color[1] = interpolate(
                        isPainting.start[1],
                        color[1],
                        isPainting.t,
                        funcs.line
                    );
                    blocks[x][y].color[2] = interpolate(
                        isPainting.start[2],
                        color[2],
                        isPainting.t,
                        funcs.line
                    );
                }
            }
            isPainting.x = x;
            isPainting.y = y;
        }
        
        tela.onmouseup = function (e)
        {
            isPainting['is?'] = false;
            isPainting.t = 0;
        }
        
        function interpolate(a, b, t, f)
        {
            return f(1 - t)*a + f(t)*b;
        }
        
        const funcs = {
            line: (x) => x,
            quad: (x) => x*x,
            cub: (x) => x*x*x,
            neg_cub: (x) => -2*x*x*x + 3*x*x
        }
        
        colorPicker.addEventListener('change', () => {
            
            const _val = colorPicker.value;
            color [0] = values[_val[1]]*16 + values[_val[2]];
            color [1] = values[_val[3]]*16 + values[_val[4]];
            color [2] = values[_val[5]]*16 + values[_val[6]];
        }, false);
    }
</script>