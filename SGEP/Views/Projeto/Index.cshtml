@model IEnumerable<SGEP.Models.Projeto>

@{
    ViewData["Title"] = "Index";
    ViewData["search-fields"] = "_Projeto";
}
<br />
<h2>Projetos</h2>
<br />
@await Html.PartialAsync("Partial/Index/Button/_CRUD")
<div class="float-right d-inline">
    @await Html.PartialAsync("Partial/Index/Button/_SearchButtons")
</div>
<br/>
<div class="container row justify-content-center">
    @await Html.PartialAsync("Partial/Index/Search/_Search", null, ViewData)
</div>
<br/>

@await Html.PartialAsync("_Create")
@await Html.PartialAsync("_Edit")

<table class="table">
    <thead class="thead-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Nome)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Inicio)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Fim)
            </th>
        </tr>
    </thead>
    <tbody id="lista">
    </tbody>
</table>

@await Html.PartialAsync("_Details")

@section Scripts 
{
    <script>

        const lista = document.getElementById('lista');
        const controller = 'Projeto';

        list({});

        function list(searchParams)
        {
            refreshTable(controller, searchParams, ['id', 'nome', 'inicio', 'fim'], ({size}) => pagination.size = size);
        }

        function onClickSelectRow (id)
        {
            selectRow(id, () => 
            {
                fetch('/' + controller + '/Get/' + id)
                .then(res => res.json())
                .then(proj => 
                {
                    const idField = get.id('Id-edit');
                    const nomeField = get.id('Nome-edit');
                    const inicioField = get.id('Inicio-edit');
                    const fimField = get.id('Fim-edit');
                    idField.value = proj.id;
                    nomeField.value = proj.nome;
                    inicioField.value = proj.inicio;
                    fimField.value = proj.fim;
                    $('#modal-edit').modal('show');
                });
            },
            () => showdetailsmodal(id));
        }
    
        function showdetailsmodal(id) {
            atualizaralocacao(id);
            fetch('/' + controller + '/ProjetoSelecionado/?id=' + id).then((res) => res.json()).then(proj => {
                var detailstable = document.getElementById('detailstable');
                var nomes = ['ID', 'Nome', 'Início', 'Fim'];
                detailstable.innerHTML = gerardetailslist(nomes, proj);
            });
            document.getElementById('abriralocacao').onclick = function () {
                gerartabelas(id);
                $('#alocacaomodal').modal('toggle');
                $('#detailsmodal').modal('toggle');
            }
            $('#detailsmodal').modal('toggle');
        }
        //script pra atualizar a tabela de alocação sempre que precisar
        function atualizaralocacao(id) {
            fetch('/' + controller + '/FuncionarioNomes').then((res) => res.json()).then(nomes => {
                fetch('/' + controller + '/FuncionariosAlocados/?id=' + id).then((res) => res.json()).then(lista => {
                    var tabela = document.getElementById('tableidd');
                    tabela.innerHTML = gerarlist(nomes, lista);
                });
            });
        }
        
        var alocadostab = document.getElementById('tabelaalocados');
        var nalocadostab = document.getElementById('tabelanaoalocados');
        function gerartabelas(id) {
            console.log(id);
            fetch('/' + controller + '/FuncionarioNomes').then((res) => res.json()).then(nomes => {
                fetch('/' + controller + '/FuncionariosAlocados/?id=' + id).then((res) => res.json()).then(func => {
                    alocadostab.innerHTML = gerarlist(nomes, func, 'desalocar', id);
                });
                fetch('/' + controller + '/FuncionariosNaoAlocados/?id=' + id).then((res) => res.json()).then(func => {
                    nalocadostab.innerHTML = gerarlist(nomes, func, 'alocar', id);
                });
            });
        }
        function alocar(funid, projid) {
            const data = new FormData();
            data.append('IdFuncionario', funid);
            data.append('IdProjeto', projid);
            fetch('/' + controller + '/AlocarFuncionario', { method: 'POST', body: data }).then(retorno => {
                gerartabelas(projid);
            });
            atualizaralocacao(projid);
        }
        function desalocar(funid, projid) {
            fetch('/' + controller + '/DesalocarProjeto?idfunc=' + funid + '&idproj=' + projid, { method: 'POST' }).then(retorno => {
                gerartabelas(projid);
            });
            atualizaralocacao(projid);
        }
        function alocardismiss() {
            $('#alocacaomodal').modal('toggle');
            $('#detailsmodal').modal('toggle');
        }
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $('#form-create').submit(function (e) {
            e.preventDefault()
            if ($(this).valid()) {
                fetch('/' + controller + '/Create', {
                    method: 'post',
                    body: new FormData(document.querySelector('#form-create'))
                }).then(function (response) {
                    $('#modal-create').modal('hide');
                    list({});
                });
            }
        });
        $('#form-edit').submit(function (e) {
            e.preventDefault()
            if ($(this).valid()) {
                fetch('/' + controller + '/Edit', {
                    method: 'post',
                    body: new FormData(document.querySelector('#form-edit'))
                })
                .then(res => res.text())
                .then(_ => 
                {
                    $('#modal-edit').modal('hide');
                    list({});
                });
            }
        });
    </script>
}
