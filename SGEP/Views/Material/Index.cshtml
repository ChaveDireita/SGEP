@model IEnumerable<SGEP.Models.Material>

@{
    ViewData["Title"] = "Index";
    ViewData["search-fields"] = "_Material";
}
<br />
<h2>Materiais</h2>
<br />
@await Html.PartialAsync("Partial/Index/Button/_CRUD")

<div class="float-right d-inline">
    @await Html.PartialAsync("Partial/Index/Button/_SearchButtons")
</div>
<br />
<div class="container row justify-content-center">
    @await Html.PartialAsync("Partial/Index/Search/_Search", null, ViewData)
</div>
<br />
@await Html.PartialAsync("_Create")
@await Html.PartialAsync("_Edit")
<table class="table">
    <thead class="thead-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Descricao)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Precounidade)
            </th>
        </tr>
    </thead>
    <tbody id="lista"></tbody>
</table>

<partial name="_Unidade" />
<partial name="_Details" />
<button type="button" class="btn btn-primary squareborder" onClick="listarunidades()" id="adduni">Gerenciar Unidades</button>
@section Scripts
    {
    <script>

        const lista = document.getElementById('lista');
        const controller = 'Material';

        list({});

        function list(searchParams) {
            refreshTable(controller, searchParams, ['showid', 'descricao', 'precounidade'], ({ size }) => pagination.size = size);
        }

        function onClickSelectRow(id) {
            selectRow(id,
                () => {
                    fetch('/' + controller + '/Get/' + id)
                        .then(res => res.json())
                        .then(mat => {
                            const idField = get.id('Id-edit');
                            const descricaoField = get.id('Descricao-edit');
                            const precoField = get.id('Preco-edit');
                            idField.value = mat.id;
                            descricaoField.value = mat.descricao;
                            precoField.value = mat.preco;
                            $('#modal-edit').modal('show');
                        });
                },
                () => {
                    var nomes = ['ID', 'Descrição', 'Categoria', 'Preço/Unidade', 'Unidade'];
                    fetch('/' + controller + '/Get/' + id)
                        .then(res => res.json())
                        .then(mat => {
                            fetch('/' + controller + '/UnidadePorIdJSON/' + mat.idUnidade)
                                .then(res => res.json())
                                .then(unidade => {
                                    var content = [mat.showid, mat.descricao, mat.categoria, mat.precounidade, unidade.nome];
                                    document.getElementById('detailstable').innerHTML = gerardetailslist(nomes, content);
                                    $('#detailsmodal').modal('toggle');
                                });
                        });
                });
        }
    </script>

    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $('#form-create').submit(function (e) {
            e.preventDefault()
            if ($(this).valid()) {
                fetch('/' + controller + '/Create', {
                    method: 'post',
                    body: new FormData(document.querySelector('#form-create'))
                }).then(function (response) {
                    $('#modal-create').modal('toggle');
                    get.id('form-create').reset();
                    list({});
                });
            }
        });
        $('#form-edit').submit(function (e) {
            e.preventDefault()
            if ($(this).valid()) {
                fetch('/' + controller + '/Edit', {
                    method: 'post',
                    body: new FormData(document.querySelector('#form-edit'))
                })
                    .then(res => res.text())
                    .then(_ => {
                        $('#modal-edit').modal('hide');
                        get.id('form-edit').reset();
                        list({});
                    });
            }
        });
        document.getElementById("modal-create-ativador").onclick = () => {
            unidadesparaselecao();
            $('#modal-create').modal('toggle');
        }
    </script>

    <!--TAG DE UNIDADES-->
    <script>
        
        document.getElementById("openuniadd").onclick = () => {
            $('#unidadesmodal').modal('toggle');
            $('#unidademanagementmodal').modal('toggle');
        }
        document.getElementById("adicionarunidade").onclick = () => {
            var nome = document.getElementById("unidadenomeinput").value;
            var abv = document.getElementById("unidadeabvinput").value;
            adicionarunidade(nome, abv);
        }


        function listarunidades() {
            fetch('/Material/Unidades').then((res) => res.json()).then(unidades => {
                var nomes = ["Nome", "Abreviação"];
                var lista = gerarlist(nomes,unidades);
                document.getElementById("unidadestable").innerHTML = lista;
            });
            $('#unidadesmodal').modal('toggle');
        }
        function adicionarunidade(nome, abv) {
            const data = new FormData();
            data.append('Nome', nome);
            data.append('Abreviacao', abv);
            fetch('/Material/AdicionarUnidade', { method: 'POST', body: data }).then(retorno => {
                listarunidades();
            });
            $('#unidademanagementmodal').modal('toggle');
        }
    </script>
}
